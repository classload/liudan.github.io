(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{206:function(a,e,t){"use strict";t.r(e);var s=t(0),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"es6-不支持现代浏览器-需要将es6转es5去执行-babel插件就可以转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6-不支持现代浏览器-需要将es6转es5去执行-babel插件就可以转换"}},[a._v("#")]),a._v(" es6 不支持现代浏览器 需要将es6转es5去执行 babel插件就可以转换")]),a._v(" "),t("h1",{attrs:{id:"_1-默认参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-默认参数"}},[a._v("#")]),a._v(" 1.默认参数")]),a._v(" "),t("ul",[t("li",[a._v("es5的写法")])]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("demo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("txt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("    \n \n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" txt"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("txt"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'hello'")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("ul",[t("li",[a._v("es6的写法")])]),a._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("demo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("txt"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'hello'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" txt\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("h1",{attrs:{id:"_2-字符串模板"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-字符串模板"}},[a._v("#")]),a._v(" 2.字符串模板")]),a._v(" "),t("ul",[t("li",[a._v("es5的写法")])]),a._v(" "),t("p",[t("strong",[a._v("需要依赖第三方库区去实现")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var compile=_.template(\"hello :<%=name%>\");\n\ncompile({name:'hello'})\n\n\n")])])]),t("ul",[t("li",[a._v("es6的写法")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var name='moe'\n\nvar txt=`hello ${name}`\n\n")])])]),t("h1",{attrs:{id:"_3-解构赋值-如果左边与右边没有意义对应-输出undefined"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-解构赋值-如果左边与右边没有意义对应-输出undefined"}},[a._v("#")]),a._v(" 3.解构赋值(如果左边与右边没有意义对应 输出undefined)")]),a._v(" "),t("h2",{attrs:{id:"_3-1-数组解构赋值场景使用：返回多个参数的取值-返回需要的值，忽略返回的其他值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-数组解构赋值场景使用：返回多个参数的取值-返回需要的值，忽略返回的其他值"}},[a._v("#")]),a._v(" 3.1 数组解构赋值\n场景使用：返回多个参数的取值/返回需要的值，忽略返回的其他值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a,b,rest\n\n[a,b]=[1,2]\n\nconsole.log(a,b)\n//输出 1，2\n\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a,b,rest\n\n[a,b,...rest]=[1,2,3,4,5,6]\n\nconsole.log(a,b,rest)\n//输出 1,2 3,4,5,6  rest是一个对象数组\n")])])]),t("p",[a._v("带默认值的")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" let a,b,rest\n\n[a,b,rest=3]=[1,2,3]\n\nconsole.log(a,b,rest)\n//输出1 ,2,3\n")])])]),t("p",[a._v("变量交换")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a=1\nlet b=2\n[a,b]=[b,a]\nconsole.info(a,b)\n// 输出 2,1\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" let a,b\n [a,,,b]=[1,2,3,4]\nconsole.info(a,b)\n//输出 1,4\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" let a,b\n [a,,...b]=[1,2,3,4,5,6]\nconsole.info(a,b)\n//输出 1, 3,4,5,6\n")])])]),t("p",[a._v("3.2 对象解构赋值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a,b\n ({a,b}={a:1,b:2})\nconsole.log(a,b)\n//输出 1 ,2\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a={p:1,q:2}\nlet {x,y}=a\nconsole.log(x,y)\n//输出1，2\n")])])]),t("p",[a._v("带有默认值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let {a:1,b:2}={a:3}\nconsole.log(a,b)\n//输出 3,2\n")])])]),t("p",[a._v("json对象属性取值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let myjson={\n  title:'我的',\n  test:[{title:'你的'}]\n}\n\nlet {title:mytitle,test:[{title:youtitle}]}=myjson\nconsole.log(mytitle,youtitle)\n//输出 我的,你的\n")])])]),t("p",[a._v("3.3 字符串解构赋值\n3.4 布尔值解构赋值\n3.5 函数解构赋值\n3.6 数值解构赋值")]),a._v(" "),t("h1",{attrs:{id:"_4-1函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1函数"}},[a._v("#")]),a._v(" 4.1函数")]),a._v(" "),t("h2",{attrs:{id:"_4-1-1-参数默认值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-参数默认值"}},[a._v("#")]),a._v(" 4.1.1 参数默认值")]),a._v(" "),t("p",[t("strong",[a._v("带有默认值的参数后面不能 带有 不带默认值的参数")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//声明\nfunction test(x,y='me'){\nconsole.log(x,y)\n}\n//调用\ntest('hello')\n//输出 hello me\n\n//test('hello',world)\n//输出 hello world\n\n//错误的写法  默认值参数后面 不能带有 不带默认值参数的参数\nfunction text(x,y='hello',z){\n}\n\n")])])]),t("h2",{attrs:{id:"_4-1-2-函数作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-函数作用域"}},[a._v("#")]),a._v(" 4.1.2 函数作用域")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//声明\nlet x=2\nfunction test(x,y=x){\nconsole.log(x,y)\n}\n\n//调用\ntest('hello')\n//输出 hello,hello  而不是 2,2\n\n\n//声明\nfunction text2(y=x){\nconsole.log(x) /\n}\n\n//调用\ntext2()//输出 hello\n\n")])])]),t("h2",{attrs:{id:"_4-2-rest参数（可变参数）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-rest参数（可变参数）"}},[a._v("#")]),a._v(" 4.2 rest参数（可变参数）")]),a._v(" "),t("p",[t("strong",[a._v("含义是 将 传递进来的参数 转换为数组（可变参数）")]),a._v(" "),t("strong",[a._v("rest 参数后面 不能再带有参数")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//声明函数\nfunction test(...args){\n   for(let v of args){\n   console.info(v)\n   }\n}\n//调用\ntest(1,3,5,'a') //输出1，3，5，a\ntest(1,5)//输出1，5\n\nfunction test2(...args,a){}//声明错误\n\n")])])]),t("h2",{attrs:{id:"_4-3-箭头函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-箭头函数"}},[a._v("#")]),a._v(" 4.3 箭头函数")]),a._v(" "),t("p",[t("strong",[a._v("一定要注意  this的指向   箭头函数适用的场合")])]),a._v(" "),t("h3",{attrs:{id:"_4-3-1-带参数的箭头函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-带参数的箭头函数"}},[a._v("#")]),a._v(" 4.3.1 带参数的箭头函数")]),a._v(" "),t("p",[t("strong",[a._v("主要包括三部分 （函数名，函数参数,返回值）")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// test是函数名\n// v 代表函数参数\n// v*2 代表函数返回值\nlet test=v=>v*2\nconsole.log(test(3))//输出6\n\n")])])]),t("h3",{attrs:{id:"_4-3-2-不带参数的箭头函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-不带参数的箭头函数"}},[a._v("#")]),a._v(" 4.3.2 不带参数的箭头函数")]),a._v(" "),t("p",[t("strong",[a._v("不到参数的箭头函数  参数部分 使用 () 替代")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let test=()=>5\nconsole.log(test())//输出5\n\n")])])]),t("h2",{attrs:{id:"_4-4-扩展运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-扩展运算符"}},[a._v("#")]),a._v(" 4.4 扩展运算符")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//将 [1,2,3]这个数组 分离为  离散的单个值\nconsole.log(...[1,2,3]) 输出1，2，3\n")])])]),t("h2",{attrs:{id:"_4-5-this绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-this绑定"}},[a._v("#")]),a._v(" 4.5 this绑定")]),a._v(" "),t("h2",{attrs:{id:"_4-6-尾调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-尾调用"}},[a._v("#")]),a._v(" 4.6 尾调用")]),a._v(" "),t("p",[t("strong",[a._v("一个函数嵌套一个 函数的调用")])]),a._v(" "),t("h1",{attrs:{id:"_5-set和map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-set和map"}},[a._v("#")]),a._v(" 5.set和map")]),a._v(" "),t("h2",{attrs:{id:"_5-1-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-set"}},[a._v("#")]),a._v(" 5.1 set")]),a._v(" "),t("p",[t("strong",[a._v("元素不能重复(去重功能)")])]),a._v(" "),t("h3",{attrs:{id:"_5-1-1-不带参数的构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-1-不带参数的构造函数"}},[a._v("#")]),a._v(" 5.1.1 不带参数的构造函数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//声明\nlet set=new Set()；\n\n//添加元素\nset.add（1）\nset.add(2)\n\n//不生效\nset.add(2)\n\n//获取长度\nset.size\n")])])]),t("h3",{attrs:{id:"_5-1-2-带参数的构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-2-带参数的构造函数"}},[a._v("#")]),a._v(" 5.1.2 带参数的构造函数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr=[1,2,3,4,5]\nlet se=new Set(arr)\n")])])]),t("h3",{attrs:{id:"_5-1-3-去重功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-3-去重功能"}},[a._v("#")]),a._v(" 5.1.3 去重功能")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr=[1,2,3,3,4,2]\nlet sarr=new Set(arr)\nconsole.info(sarr）//输出 1,2,3,4\n\n// 去重必须是 数据类型相等 3与'3' 不相等\nlet arr=[1,2,3,'3']\nlet sarr=new Set(arr)\nconsole.info(sarr）//输出 1,2,3,3\n\n")])])]),t("h3",{attrs:{id:"_5-1-4-set常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-4-set常用方法"}},[a._v("#")]),a._v(" 5.1.4 set常用方法")]),a._v(" "),t("ul",[t("li",[a._v("add")]),a._v(" "),t("li",[a._v("delete")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr=['a','b','c']\nlet a=new Set(arr)\n//输出 a元素\na.delete('a')\n")])])]),t("ul",[t("li",[a._v("has")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr=['a','b','c']\nlet a=new Set(arr)\n//判断是否有a元素\na.has('a') //返回true\n")])])]),t("ul",[t("li",[a._v("clear")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr=['a','b','c']\nlet a=new Set(arr)\n//清空整个set\na.clear()\n\n")])])]),t("h3",{attrs:{id:"_5-1-5-set-遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-5-set-遍历"}},[a._v("#")]),a._v(" 5.1.5 set 遍历")]),a._v(" "),t("p",[t("strong",[a._v("set key值和value值相等")])]),a._v(" "),t("ul",[t("li",[a._v("keys遍历")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr=['a','b','c']\nlet set=new Set(arr)\nfor(let key of set.keys()){\n console.log(key) //输出 a,b,c\n}\n")])])]),t("ul",[t("li",[a._v("values 遍历")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr=['a','b','c']\nlet set=new Set(arr)\nfor(let value of set.values()){\n console.log(value) //输出 a,b,c\n}\n")])])]),t("ul",[t("li",[a._v("对象遍历")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr=['a','b','c']\nlet set=new Set(arr)\nfor(let value of set){\n console.log(value) //输出 a,b,c\n}\n")])])]),t("ul",[t("li",[a._v("entries遍历")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr=['a','b','c']\nlet set=new Set(arr)\nfor(let (key,value) of set.entries()){\n console.log(key,value) //输出 a,a b,b c,c\n}\n")])])]),t("ul",[t("li",[a._v("forEach遍历")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr=['a','b','c']\nlet set=new Set(arr)\nset.forEach(function(item){console.log(item)}) // a,b,c\n")])])]),t("h2",{attrs:{id:"_5-2-weakset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-weakset"}},[a._v("#")]),a._v(" 5.2 WeakSet")]),a._v(" "),t("ul",[t("li",[a._v("数据类型只能是对象")]),a._v(" "),t("li",[a._v("如果数据中添加了对象 不会去检测这个对象是否已经被垃圾回收 回收了")]),a._v(" "),t("li",[a._v("没有sizes属性")]),a._v(" "),t("li",[a._v("没有clear方法")]),a._v(" "),t("li",[a._v("不能遍历")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let args={}；\nlet set=new WeakSet();\nset.add(args)\nset.add(1)//报错，不能添加基本数据类型\n")])])]),t("h2",{attrs:{id:"_5-3-map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-map"}},[a._v("#")]),a._v(" 5.3 map")]),a._v(" "),t("p",[t("strong",[a._v("任意数据类型 都可以 作为key")])]),a._v(" "),t("h3",{attrs:{id:"_5-3-1-不带参数的构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-1-不带参数的构造函数"}},[a._v("#")]),a._v(" 5.3.1 不带参数的构造函数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a=['abc']\nlet map=new Map()\n//添加元素\nmap.set(a,1)\n//获取元素\nconsole.log(map.get(a) ) //打印1\n//获取集合大小\nconsole.info(map.size)//打印1\n\n")])])]),t("h3",{attrs:{id:"_5-3-2-带参数的构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-2-带参数的构造函数"}},[a._v("#")]),a._v(" 5.3.2 带参数的构造函数")]),a._v(" "),t("p",[t("strong",[a._v("每一个值为一个数组  每个数组中 第一个参数为key,第二参数为value")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let map=new Map([['a','1'],['b'.'2'],['c','3']])\n")])])]),t("h3",{attrs:{id:"_5-3-3-常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-3-常用方法"}},[a._v("#")]),a._v(" 5.3.3 常用方法")]),a._v(" "),t("ul",[t("li",[a._v("delete")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" map.delete(key)\n")])])]),t("ul",[t("li",[a._v("clear")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("map.clear()\n")])])]),t("ul",[t("li",[a._v("has")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("map.has(key) //返回布尔值\n")])])]),t("ul",[t("li",[a._v("set")])]),a._v(" "),t("h3",{attrs:{id:"_5-3-4-遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-4-遍历"}},[a._v("#")]),a._v(" 5.3.4 遍历")]),a._v(" "),t("p",[t("strong",[a._v("与set的遍历一致")])]),a._v(" "),t("h2",{attrs:{id:"_5-4-weakmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-weakmap"}},[a._v("#")]),a._v(" 5.4 WeakMap")]),a._v(" "),t("ul",[t("li",[a._v("数据类型只能是对象")]),a._v(" "),t("li",[a._v("如果数据中添加了对象 不会去检测这个对象是否已经被垃圾回收 回收了")]),a._v(" "),t("li",[a._v("没有sizes属性")]),a._v(" "),t("li",[a._v("没有clear方法")]),a._v(" "),t("li",[a._v("不能遍历")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let weakMap=new WeakMap()\n")])])]),t("h1",{attrs:{id:"_6-异步操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-异步操作"}},[a._v("#")]),a._v(" 6.异步操作")]),a._v(" "),t("h1",{attrs:{id:"_7-类和对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-类和对象"}},[a._v("#")]),a._v(" 7.类和对象")]),a._v(" "),t("h2",{attrs:{id:"_7-1-对象扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-对象扩展"}},[a._v("#")]),a._v(" 7.1 对象扩展")]),a._v(" "),t("h3",{attrs:{id:"_7-1-1-简洁表示法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-1-简洁表示法"}},[a._v("#")]),a._v(" 7.1.1 简洁表示法")]),a._v(" "),t("p",[t("strong",[a._v("json 简洁表达")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//es5\nlet i=2\nlet j=3\nlet obj={\ni:i,\nj:j\n}\n//es6 \nlet obj1={i,j}\n\n")])])]),t("p",[t("strong",[a._v("json中 函数的简洁表达")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//es5\nlet test={\n hello:function(){}\n}\n\n//调用  test.hello()\n\n//es6中\nlet test1={\nhello(){}\n}\n\n//调用 test1.hello()\n\n")])])]),t("h3",{attrs:{id:"_7-1-2-属性表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-2-属性表达式"}},[a._v("#")]),a._v(" 7.1.2 属性表达式")]),a._v(" "),t("p",[t("strong",[a._v("es5中json对象的key值是固定的，但es6中key可以是一个变量")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//es5\nlet key='o'\nlet a={\no:'c'\n}\n\n//es6 key可以变量  用[]去引用\nlet b={\n[key]:'c'\n}\n\n")])])]),t("h3",{attrs:{id:"_7-1-3-扩展运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-3-扩展运算符"}},[a._v("#")]),a._v(" 7.1.3 扩展运算符")]),a._v(" "),t("p",[t("strong",[a._v("需要babel-polyfill的支持  但支持不怎么友好  还是无法使用")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//c 的值为 {c:'c',d:'d'}\nlet {a,b,...c}={a:'1',b:'2',c:'c',d:'d'}\n\n")])])]),t("h3",{attrs:{id:"_7-1-4-object新增方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-4-object新增方法"}},[a._v("#")]),a._v(" 7.1.4 Object新增方法")]),a._v(" "),t("p",[t("strong",[a._v("属性拷贝")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//基本拷贝 \n// 第一个 目标对象  target 拷贝到那里去\n// 第二个参数 源对象 source 需要拷贝的对象\n// 表示将[3,4]这个数组对象 拷贝到[1,2]这个数组对象中\n// 打印 [1,2,3,4] 拷贝过程中属性值相同则覆盖\n console.log(Object.assign([1,2],[3,4]))\n \n //基本拷贝 不会将 引用数据类型和 继承的属性 拷贝进去     需要使用深拷贝\n\n")])])]),t("p",[t("strong",[a._v("值比较--is方法(与===的用法没有区别)")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//基本数据类型\nconsole.log(Object.is('a','a'))// 打印true\nconsole.log('a'==='a') //打印true\n\n//引用数据类型 比较的是两个变量的地址\nconsole.log(Object.is([],[]))//返回false\nconsole.log([]===[])//返回false\n")])])]),t("h2",{attrs:{id:"_7-2类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-2类"}},[a._v("#")]),a._v(" 7.2类")]),a._v(" "),t("p",[a._v("###7.3 类的基本定义和生成实例")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class Parent{\n// 构造函数\nconstructor(name='默认值'){\nthis.name=name;给私有属性赋值\n }\n}\n//生成实例\nlet parent=new Parent('v')\n")])])]),t("h3",{attrs:{id:"_7-4-类的继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-类的继承"}},[a._v("#")]),a._v(" 7.4 类的继承")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class Child extends Parent{\n    constructor(name='child'){\n    \n    //调用父类 构造函数  一定要在构造函数的第一行\n    super（name）t\n    //super() //使用name默认值\n    }\n}\n\n")])])]),t("h3",{attrs:{id:"_7-5-类的getter和setter方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-类的getter和setter方法"}},[a._v("#")]),a._v(" 7.5 类的getter和setter方法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class Parent(){\n constructor(name='ok'){\n this.name=name\n }\n \n //get方法\n get longName(){\n  return this.name\n }\n \n //set 方法\n set longName(value){\n   this.name=value\n }\n\n}\n\n//使用\nlet parent=new Parent()\n// getter\nconsole.info(parent.longName)\n// setter \nparent.longName='你的'\n\n")])])]),t("h3",{attrs:{id:"_7-6-静态方法和静态属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-静态方法和静态属性"}},[a._v("#")]),a._v(" 7.6 静态方法和静态属性")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class Parent{\n\n constructor(name='ok'){\n this.name=name\n }\n \n //静态方法\n  static sayHello(){\n    console.info（this.name）\n  }\n  \n}\n\n//使用\n//静态方法\nParent.sayHello()\n\n//静态属性  没有关键字 \nParent.type='搜索'\n\n")])])]),t("h1",{attrs:{id:"_8-模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-模块化"}},[a._v("#")]),a._v(" 8.模块化")]),a._v(" "),t("h1",{attrs:{id:"_9-let和const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-let和const"}},[a._v("#")]),a._v(" 9.let和const")]),a._v(" "),t("h2",{attrs:{id:"_9-1作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-1作用域"}},[a._v("#")]),a._v(" 9.1作用域")]),a._v(" "),t("ol",[t("li",[a._v("全局作用域 var")]),a._v(" "),t("li",[a._v("函数作用域 var")]),a._v(" "),t("li",[a._v("块作用域  let (es6 默认开启严格模式) 没有声明使用会包 引用错误")])]),a._v(" "),t("h2",{attrs:{id:"_9-2-let"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-let"}},[a._v("#")]),a._v(" 9.2 let")]),a._v(" "),t("ol",[t("li",[a._v("作用域是块作用域")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("  function demo(){\n   for(var i=0;i<3;i++){\n\t\tconsole.log(i)\n\t}\n   console.log(i)\n  \n}\n// 输出结果为 1 2 3\n\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function demo(){\n   for(var i=0;i<3;i++){\n\t\tconsole.log(i)\n\t}\n   console.log(i)\n//输出结果为 引用错误  es6默认开启严格模式\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("不能重复声明变量")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var a=1\nvar a=3\na=4\nconsole.log(a)\n//输出结果为4\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a=1;\nlet a=1;\nconsole.info(a)\n//会报重复声明的错误\n\n")])])]),t("h2",{attrs:{id:"_9-3-const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-const"}},[a._v("#")]),a._v(" 9.3 const")]),a._v(" "),t("ol",[t("li",[a._v("用于声明常量，并且不能修改（对象除外）。如果修改 会报 readonly")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const a=1\n\na=2;\n\nconsole.log(a)\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("声明必须赋值")]),a._v(" "),t("li",[a._v("作用域是块作用域")]),a._v(" "),t("li",[a._v("const 声明常量时,如果变量时基础数据类型，常量是指 值不变\nconst 声明常量时 如果变量时引用数据类型(对象) 常量时指 对象的地址不发生变化，对象内的变量可以修改")])]),a._v(" "),t("h1",{attrs:{id:"_10-正则表达式的扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-正则表达式的扩展"}},[a._v("#")]),a._v(" 10.正则表达式的扩展")]),a._v(" "),t("h2",{attrs:{id:"_10-1-构造函数和属性的变化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-构造函数和属性的变化"}},[a._v("#")]),a._v(" 10.1 构造函数和属性的变化")]),a._v(" "),t("ul",[t("li",[a._v("es5")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//表示匹配 i忽略大小写 配置字符串xyz的 \nlet a=new RegExp('xyz',i);\nlet b=new RegExp(/xyz/i)\nconsole.log(a.test('xyz'),b.test('xyz'))\n//输出 true ，true\n")])])]),t("ul",[t("li",[a._v("es6的写法")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//表示 第二个参数的修饰符 i 覆盖 ig修饰符\nlet b=new RegExp(/xyz/ig,'i')\n// es6 特有 flags是获取 修饰符的\nconsole.log(b.flags)\n\n//输出i \n")])])]),t("h2",{attrs:{id:"_10-2-全局匹配修饰符y和g"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-全局匹配修饰符y和g"}},[a._v("#")]),a._v(" 10.2 全局匹配修饰符y和g")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let s=\'bbb_bb_b\'\nlet x=/b+/g  //es5 匹配时 不需要第一个字母就匹配上\nlet y=/b+/y  //es6  匹配时  需要第一个字母就匹配上\n//都匹配上了 bbb \nconsole.info("one",x.exec(s),y.exec(s))\n//只有x 匹配上bb  y 没有匹配上\nconsole.info("one",x.exec(s),y.exec(s))\n\n//查看是否开启了 y 匹配模式(粘连模式)\nconsole.info(x.sticky) //false\nconsole.info(y.sticky) //true\n\n')])])]),t("h2",{attrs:{id:"_10-3-u修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-u修饰符"}},[a._v("#")]),a._v(" 10.3 u修饰符")]),a._v(" "),t("p",[a._v("**需要将 添加u修饰符 才能 识别61 为a\n如果 字符大于两个字节长度的字符 必须使用u\n.匹配的是任意字符 但字符必须小于字节的字符，也匹配不到 换行符  空格符 回车符\n**")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.log(/\\u{61}/.test('a')) //值为false\ncnsole.log(/\\u{61}/u.test('a')) // 值为true\n\n")])])]),t("h2",{attrs:{id:"_10-4-s修饰符（未实现）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-s修饰符（未实现）"}},[a._v("#")]),a._v(" 10.4 s修饰符（未实现）")]),a._v(" "),t("p",[a._v("#11.字符串扩展\nes7提案(需要安装)：babel-polyfill")]),a._v(" "),t("h2",{attrs:{id:"_11-1-处理大于两个字节的unicode码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-处理大于两个字节的unicode码"}},[a._v("#")]),a._v(" 11.1 处理大于两个字节的unicode码")]),a._v(" "),t("p",[a._v("es5")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.log('s','\\u20BB7')\n// ES5中 会将 20BB 当成一个字符  但是这个字符已经超出了0xFFFF 所以显示未知字符\n// 然后 7 单独 当成一个字符\n")])])]),t("p",[a._v("es6")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//es6 中通过大括号的方式去表达超出 两个字节的字符\nconsole.info('s','\\u{20BB7}')\n")])])]),t("h2",{attrs:{id:"_11-2-字符串获取unicode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-字符串获取unicode"}},[a._v("#")]),a._v(" 11.2 字符串获取unicode")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a='吉' //假设这个汉字 以及该超出了 unicode的表示范围0xffff\nconsole.log(a.lenght) //输出 2 \n\nlet b='吉a'\nconsole.log(b.lenght)//输出3\n\n\n//es5 无法正常取值  因为  字符已经超出了 oxFFFF的表达的范围  \nconsole.info(a.charAt(0))\nconsole.info(a.charAt(1))\nconsole.info(a.charCodeAt(0))\nconsole.info(a.charCodeAt(1))\n\n//es6 \nconsole.info(a.codePointAt(0)) //输出 吉\nconsole.info(a.codePointAt(1)) //输出a\nconsole.info(a.codePontAt(0).toString(16))\n\n\n//es5 中根据 unicode码获取字符 不能处理大于两个字符\nconsole.info(String.fromCharCode('0x20BB7'))//显示乱码\n//es6 \nconsole.info(String.fromCodePoint('0x20BB7'))\n\n\n//es5 字符串遍历\n let s='\\u{20BB7}abc'\nfor(let a=0;a<s.length;a++){\n  console.info(s[a])\n//输出 乱码 乱码 a,b,c  一个字符被当成 两个字符处理了\n}\n\n//es6 处理\n let s='\\u{20BB7}abc'\nfor(let a of s){\n  console.info(a)\n//输出  吉,a,b,c  \n}\n")])])]),t("h2",{attrs:{id:"_11-3-字符串相关方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-字符串相关方法"}},[a._v("#")]),a._v(" 11.3 字符串相关方法")]),a._v(" "),t("h3",{attrs:{id:"_11-3-1-字符串包含"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-1-字符串包含"}},[a._v("#")]),a._v(" 11.3.1 字符串包含")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//判断 str这个变量是否包含 g 这个字符\nlet str='string'\nconsole.info(str.includes('g'))//返回true\n\n")])])]),t("h3",{attrs:{id:"_11-3-2-字符串起始和结尾"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-2-字符串起始和结尾"}},[a._v("#")]),a._v(" 11.3.2 字符串起始和结尾")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let str='hello'\n\n//判读字符串是否以 he开始的\nconsole.info(str.startsWith('he'))//返回true\n\n//判断字符串是否以lo 结尾的\nconsole.log(str.endsWith('lo'))//返回false\n\n")])])]),t("h3",{attrs:{id:"_11-3-3-赋值字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-3-赋值字符串"}},[a._v("#")]),a._v(" 11.3.3 赋值字符串")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let str='abk'\n//表示赋值str这个字符串两次\nconsole.log(str.repeat(2))//输出 abkabk\n")])])]),t("h3",{attrs:{id:"_11-3-4-字符串模板"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-4-字符串模板"}},[a._v("#")]),a._v(" 11.3.4 字符串模板")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\nlet str1='hello'\nlet str2='world'\nlet str3=`i am ${str1} ${str2}`\nconsole.info(str3)//输出 i am hello world\n")])])]),t("h3",{attrs:{id:"_11-3-5-补白效果（es7-草案-可以通过-babel-polyfill去在es6进行使用）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-5-补白效果（es7-草案-可以通过-babel-polyfill去在es6进行使用）"}},[a._v("#")]),a._v(" 11.3.5 补白效果（es7 草案 可以通过 babel-polyfill去在es6进行使用）")]),a._v(" "),t("p",[a._v("用于处理日期")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\n//不足两位 前面补0\nconsole.info('1',padStart(2,'0')) //输出 01\n//不足两位 往后补0\nconsole.info('1',padEnd(2,'0')) //输出 10\n\n")])])]),t("h3",{attrs:{id:"_11-3-6-标签模板-防止xss-攻击，多语言编辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-6-标签模板-防止xss-攻击，多语言编辑"}},[a._v("#")]),a._v(" 11.3.6 标签模板(防止xss 攻击，多语言编辑 )")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let obj={username:'ld',password:'ld'}\nconsole(abc` i am ${username}  ${password} `) //输出 i am ,,, ld ,password\nfunction($,v1,v2){\n\nreturn $+v1+v2\n}\n\n\n")])])]),t("h3",{attrs:{id:"_11-3-7-字符串转义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-7-字符串转义"}},[a._v("#")]),a._v(" 11.3.7 字符串转义")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.info(String.raw`h1\\n${1+2}`)//输出 h1\\n3\nconsole.info(`h1\\n${1+2}`)//输出 h1 换行 3\n\n")])])]),t("h1",{attrs:{id:"_12-数值扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-数值扩展"}},[a._v("#")]),a._v(" 12.数值扩展")]),a._v(" "),t("h2",{attrs:{id:"_12-1-进制表示方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-1-进制表示方法"}},[a._v("#")]),a._v(" 12.1 进制表示方法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//二进制表示\nconsole.log(0b11111111)\nconsol.log(0B11111111)\n\n//八进制表示\nconsole.log(0o767)\nconsole.log(0O767)\n")])])]),t("h2",{attrs:{id:"_12-2-数值有尽判断-是否是有限小数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-2-数值有尽判断-是否是有限小数"}},[a._v("#")]),a._v(" 12.2 数值有尽判断(是否是有限小数)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.info(Number.isFinite(15)) //输出true\nconsole.info(Number.isFinite(NaN)) //输出false\nconsole.info(Number.isFinite(1/0)) //输出false\n")])])]),t("h2",{attrs:{id:"_12-3-判断是否是一个数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-3-判断是否是一个数"}},[a._v("#")]),a._v(" 12.3 判断是否是一个数")]),a._v(" "),t("p",[a._v("console.info(Number.isNaN(NaN)) //返回true\nconsole.info(Number.isNaN(15)) //返回false")]),a._v(" "),t("h2",{attrs:{id:"_12-4-判断一个数是否是一个整数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-4-判断一个数是否是一个整数"}},[a._v("#")]),a._v(" 12.4 判断一个数是否是一个整数")]),a._v(" "),t("p",[a._v("参数必须接受一个数值类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.info(Number.isInteger(25)) //返回true\nconsole.info(Number.isInteger(25.0)) //返回true\nconsole.info(Number.isInteger('25.1')) //返回false\nconsole.info(Number.isInteger('25.0')) //返回false\n")])])]),t("h2",{attrs:{id:"_12-5-表示数值的两个范围"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-5-表示数值的两个范围"}},[a._v("#")]),a._v(" 12.5 表示数值的两个范围")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.info(Number.MAX_SALF_INTEGER) //整数的最大表示范围\nconsole.info(Number.MIN_SALF_INTEGER) //整数的最大表示范围\n")])])]),t("h2",{attrs:{id:"_12-5-判断一个数值是否在有效范围之内"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-5-判断一个数值是否在有效范围之内"}},[a._v("#")]),a._v(" 12.5 判断一个数值是否在有效范围之内")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.info(Number.isSafeInteger(1))//返回true\nconsole.info(Number.isSafeInteger('1'))//返回false\n")])])]),t("h2",{attrs:{id:"_12-5-返回一个数值的整数部分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-5-返回一个数值的整数部分"}},[a._v("#")]),a._v(" 12.5 返回一个数值的整数部分")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.info(Math.trunc(1.2))//返回1\nconsole.info(Math.trunc(1.9))//返回1\n")])])]),t("h2",{attrs:{id:"_12-6-判断一个数-是正负数或0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-6-判断一个数-是正负数或0"}},[a._v("#")]),a._v(" 12.6 判断一个数  是正负数或0")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.info(Math.sign(-5))//返回 -1 表示负数\nconsole.info(Math.sign(5))//返回 1 表示整数\nconsole.info(Math.sign(0))//返回 0 表示0\nconsole.info(Math.sign('50'))//返回 1 表示正数 \nconsole.info(Math.sign('abc'))//返回 NaN\n")])])]),t("h2",{attrs:{id:"_12-7-数值的立方根"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-7-数值的立方根"}},[a._v("#")]),a._v(" 12.7 数值的立方根")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.info(Math.cbrt(-1))//返回 -1 \nconsole.info(Math.sign(8))//返回 2 \n\n")])])]),t("h2",{attrs:{id:"_12-8-三角函数和对数方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-8-三角函数和对数方法"}},[a._v("#")]),a._v(" 12.8 三角函数和对数方法")]),a._v(" "),t("h1",{attrs:{id:"_13-数组扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-数组扩展"}},[a._v("#")]),a._v(" 13.数组扩展")]),a._v(" "),t("h2",{attrs:{id:"_13-1-of方法-将一组数字转换为数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-1-of方法-将一组数字转换为数组"}},[a._v("#")]),a._v(" 13.1 of方法(将一组数字转换为数组)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//带参数\nlet arr=Array.of(1,2,3,4,5)\nconsole.info(arr)//打印 [1,2,3,4,5]\n\n//不带参数\nlet arr1=Arrray.of()\nconsole.info(arr)//打印[]\n")])])]),t("h2",{attrs:{id:"_13-2-from-方法（将集合转为数组）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-2-from-方法（将集合转为数组）"}},[a._v("#")]),a._v(" 13.2 from 方法（将集合转为数组）")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Array.from(参数)\n\n//打印 2，6，10\nconsole.log(Array.from([1,3,5],function(item){ return item*2}))\n\n")])])]),t("h2",{attrs:{id:"_13-3-fill方法-数组填充"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-3-fill方法-数组填充"}},[a._v("#")]),a._v(" 13.3 fill方法 (数组填充)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//完整替换\nconsole.info(['1','a',undefined].fill(7))//输出[7,7,7]\n\n//指定位置替换\n//第一个参数 代表 填充的元素\n// 第二个 和第三个 参数代表 起始位置和结束位置\n//这个表示 将 索引1 到3的元素 替换为7\nconsole.info(['a','1','3'].fill(7,1,3))//输出['a',7,7]\n\n")])])]),t("h2",{attrs:{id:"_13-4-数组的keys-values-entries方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-4-数组的keys-values-entries方法"}},[a._v("#")]),a._v(" 13.4 数组的keys,values,entries方法")]),a._v(" "),t("h3",{attrs:{id:"_13-4-1-keys方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-4-1-keys方法"}},[a._v("#")]),a._v(" 13.4.1 keys方法")]),a._v(" "),t("ul",[t("li",[a._v("keys方法获取 数组的索引的集合")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for(let i of [1,2,3].keys()){\n\n  console.info(i)//输出 0，1，2\n}\n\n")])])]),t("h3",{attrs:{id:"_13-4-2-values方法-存在-兼容性问题-需要引入-babel-polyfill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-4-2-values方法-存在-兼容性问题-需要引入-babel-polyfill"}},[a._v("#")]),a._v(" 13.4.2 values方法(存在 兼容性问题 需要引入 babel-polyfill)")]),a._v(" "),t("ul",[t("li",[a._v("values方法获取到数组的值的集合")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\nfor(let va of [1,2,3].values()){\n\n  console.info(val)//输出 1，2，3\n}\n\n")])])]),t("h3",{attrs:{id:"_13-4-3-entries方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-4-3-entries方法"}},[a._v("#")]),a._v(" 13.4.3 entries方法")]),a._v(" "),t("ul",[t("li",[a._v("获取数组 key-value的集合")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for(let [index,value] of ['a','b','c'].entries()){\n//输出 0，a 1,b 2,c\n   console.info(index,value)\n}\n\nfor(let [index,value] of Object.entries(['a','b','c'])){\n//输出 0，a 1,b 2,c\n   console.info(index,value)\n}\n")])])]),t("h2",{attrs:{id:"_13-5-copywithin方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-5-copywithin方法"}},[a._v("#")]),a._v(" 13.5 copyWithIn方法")]),a._v(" "),t("h2",{attrs:{id:"_13-6-find和findindex方法（数组查找）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-6-find和findindex方法（数组查找）"}},[a._v("#")]),a._v(" 13.6 find和findIndex方法（数组查找）")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//找出 大于3的第一个元素  \n//输出4 \nconsole.info([1,2,3,4,5,6].find(function(item){return item>3}))\n\n//找出大于3的第一个元素的索引\n//输出3\nconsole.info([1,2,3,4,5,6].findIndex(function(item){return item>3}))\n")])])]),t("h2",{attrs:{id:"_13-7-includes方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-7-includes方法"}},[a._v("#")]),a._v(" 13.7 includes方法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//查找元素中 是否包含 1 这个元素\n//返回 true\nconsole.info([1,2,NaN].includes(1))\n\n//查找元素中  是否包含NaN这个元素   \n//返回true   这种比较es5 不能做到\nconsole.info([1,2,NaN].includes(1))\n\n\n")])])]),t("h1",{attrs:{id:"_14-symbol数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-symbol数据类型"}},[a._v("#")]),a._v(" 14.Symbol数据类型")]),a._v(" "),t("p",[t("strong",[a._v("声明一个独一无二 永不相等的一个值")])]),a._v(" "),t("h2",{attrs:{id:"_14-1-symbol-和symbol-for-参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-symbol-和symbol-for-参数"}},[a._v("#")]),a._v(" 14.1 Symbol()和Symbol.for(参数)**")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a=Symbol()\nlet b=Symbol()\n\nconsole.info(a===b) //返回false\n\n// 声明\nlet a1=Symbol.for('a1') \nlet a2=Symbol.for('a1')\n\n//返回true \n//因为 声明时  会在全局查找 a1这个变量是否已经声明过 \n// 如果没有声明  就创建一个  \n// 如果已经声明  就返回已经创建的\nconsole.info(a1===a2)\n\n")])])]),t("p",[t("strong",[a._v("与json配合使用")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a=Symbol.for('abc')\n//如果在 es5中 在 json中 声明重复key 会报错\n// 但 es6中可以使用 Symbol解决\nlet b={\n  [a]：'a',\n  abc::'b'\n}\nconsole.log(b) //输出层 Symbol[abc]:a,abc:b\n\n//Symbol声明的变量 通过 for循环不能取到值\nfor(let [index,value] of Object.entries(b)){\n\nconsole.log(index,value) //只输出 abc:b\n\n}\n")])])]),t("h2",{attrs:{id:"_14-2-objetc-getownpropertysymbols"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-2-objetc-getownpropertysymbols"}},[a._v("#")]),a._v(" 14.2 Objetc.getOwnPropertySymbols**")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\n//Symbol声明变量 需要使用  特殊 语法去获得值 只能取 Symbol声明的值\n\nObjetc.getOwnPropertySymbols(b).forEach(function(item){\n\n console.info(b[item]) //输出 a\n})\n\n")])])]),t("h2",{attrs:{id:"_14-3-reflect-ownkeys-参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-3-reflect-ownkeys-参数"}},[a._v("#")]),a._v(" 14.3 Reflect.ownKeys(参数)")]),a._v(" "),t("p",[t("strong",[a._v("既能获得普通变量  又能获取 Symbol修饰的变量")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//输出   Symbol[abc]:a,abc:b\nReflect.ownKeys(b).forEach(item){\nconsole.info(b[item])\n}\n\n")])])]),t("h1",{attrs:{id:"_15-proxy和reflect"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-proxy和reflect"}},[a._v("#")]),a._v(" 15.Proxy和Reflect")]),a._v(" "),t("h2",{attrs:{id:"_15-1-proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-1-proxy"}},[a._v("#")]),a._v(" 15.1 Proxy")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//建立供应商对象\nlet obj={\nname:'liuda'，\ntime:'2019-05-16',\n-r:123\n}\n\n\n//建立代理对象\nlet proxy=new Proxy(obj,{\n\n//get 拦截器\n// target 表示 供应商对象\n// key 供应商对象的 key值\nget(target,key){\n\n  return  target[key].replace('2019','2020')\n},\n\n//set 拦截器\nset(target,key,value){\n\n  // 只允许修改name属性\n   if(key==='name'){\n    return target[key]=value\n   }else{\n   \n    return target[key]\n   }\n\n},\n//has 拦截器  暴漏属性 是可以被 has查询到--拦截in运算符\nhas(target,key){\n\n//只可以查询 name属性\nif(key==='name'){\n  return target[key]\n}else{\n  return false\n}，\n\n//属性删除 的拦截器\n// 定义只允许删除 _开头的属性\ndeleteProperty(target,key){\n\nif(key.indexOf('_')>-1){\n\n  delete target[key]\n}else{\n\n  retunr target[key]\n\n}\n\n}，\n// 拦截 Object.ownKeys(),\n//拦截 Objetc.getPropertySymbols()\n//拦截 Object.getPropertyNames()\n// 只允许获得 处name 属性之外的keys\nownKeys(target,key){\n return Object.keys(target).filter(item=>item!='name')\n}\n\n\n})\n\n\n//get 拦截器\n console.info(proxy.time)\n //输出 2020-05-16  而原始的obj 对象属性name的值为 2019-05-16\n\n//set 拦截器\n// name属性才可以修改,time属性不可以修改\nproxy.time=2018\n//可以修改name属性\nproxy.name='cmd'\n\n//has拦截器 只允许 查询name属性\nconsole.info('name' in proxy)//打印 true\nconsole.info('time' in proxy)//打印 false\n\n\n//deleteProperty拦截器\n//是无法删除name属性的\ndelete proxy.name\n\n//可以删除\ndelete proxy._r\n\n//ownKeys 拦截器\n// 输出 time -r\nconsole.log('keys', Object.keys(target))\n\n\n\n\n\n")])])]),t("h2",{attrs:{id:"_15-2-reflect"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-2-reflect"}},[a._v("#")]),a._v(" 15.2 Reflect")]),a._v(" "),t("p",[t("strong",[a._v("proxy有的方法  Reflect都有,用法一致")])]),a._v(" "),t("ul",[t("li",[a._v("get")]),a._v(" "),t("li",[a._v("set")]),a._v(" "),t("li",[a._v("has")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let obj={a:1,b:2}\n\n\n//get 获取某个属性的值\nReflect.get(obj,'a') //返回1\n\n//set 数值某个属性的值\nReflect.set(obj,'a','4')// a属性被设置为4 \n\n//has方法  判断是否存在某个属性\nReflect.has(obj,'name') //返回false\n\n")])])]),t("h1",{attrs:{id:"_16-promsie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-promsie"}},[a._v("#")]),a._v(" 16 .Promsie")]),a._v(" "),t("h2",{attrs:{id:"_16-1-es5的异步回调写法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-1-es5的异步回调写法"}},[a._v("#")]),a._v(" 16.1 es5的异步回调写法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//定义\nlet ajax=function(callback){\n     \n     callback&&callback.call()\n}\n\n//调用\najax(fucntion(){\n})\n")])])]),t("h2",{attrs:{id:"_16-2-es6的异步回调写法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-2-es6的异步回调写法"}},[a._v("#")]),a._v(" 16.2 es6的异步回调写法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//定义\nlet ajax=function(){\n\n   return new Promise(function (resolve,reject){\n      //继续下一步操作\n      resolve()\n   })\n}\n\n//使用\n//第一个函数表示 继续执行的操作\n//第二个参数表示 拒绝执行  \najax().then(function(){\n\n//执行操作\n},function(){})\n\n")])])]),t("p",[t("strong",[a._v("捕捉异常信息")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\nlet ajax=function(name）{\n\n\n  return new Promise(function(resolve,reject){\n  \n  if(num>5){\n     resolve()\n  }else{\n    throw new Error('出错了')\n  }\n  })\n\n}\n//使用  捕捉异常\najax(4).then(function(){}).\ncatch(function(error){\n console.info(error)\n})\n\n")])])]),t("h2",{attrs:{id:"_16-3-promise-all"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-3-promise-all"}},[a._v("#")]),a._v(" 16.3 Promise.all()")]),a._v(" "),t("hr"),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//表示 所有 的promise 实例 执行完毕之后 采取执行 后面的操作\nPromise.all([\n \n ajax(4),\n ajax(5),\n ajax(8) \n]).then(function(){})\n\n")])])]),t("h2",{attrs:{id:"_16-4-promise-race（）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-4-promise-race（）"}},[a._v("#")]),a._v(" 16.4 Promise.race（）")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//只要其中一个   promise 实例执行完毕 其他的promise就不行执行了 先到先得\nPromise.race([\n \n ajax(4),\n ajax(5),\n ajax(8)\n]).then(function(){})\n\n\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);